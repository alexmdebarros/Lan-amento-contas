import pyautogui
import time
import pandas as pd
import keyboard  # Para detectar a tecla de interrup√ß√£o
import threading  # Para rodar a detec√ß√£o de ESC em paralelo

# Vari√°vel global para interrup√ß√£o
interromper = False

# Tempo m√©dio gasto manualmente por lan√ßamento (em segundos)
tempo_por_lancamento_manual = 25.61

# Fun√ß√£o para monitorar a tecla ESC
def monitorar_tecla():
    global interromper
    keyboard.wait("esc")  # Espera at√© que ESC seja pressionado
    interromper = True
    print("\nüõë Interrompido pelo usu√°rio!")

# Iniciar monitoramento de ESC em uma thread separada
threading.Thread(target=monitorar_tecla, daemon=True).start()

# Carregar a planilha CSV (ajuste o nome do arquivo)
df = pd.read_csv("./lancamentos.csv", sep=";", dtype={"Cta": str, "Vl_lancamento": str})  
total_lancamentos = len(df)

# üïí Contagem regressiva antes de iniciar
print("‚ö†Ô∏è Prepare a tela do TOTVS! O sistema iniciar√° em:")
for i in range(5, 0, -1):
    if interromper:
        print("üõë Execu√ß√£o cancelada antes de iniciar.")
        exit()
    print(f"‚è≥ {i} segundos...")
    time.sleep(1)

print("üöÄ Iniciando lan√ßamentos...")
time.sleep(2)  # Pequena pausa para transi√ß√£o

# ‚è≥ Capturar o tempo de in√≠cio
tempo_inicio = time.time()

for index, row in df.iterrows():
    if interromper:
        break  # Se ESC for pressionado, sai do loop

    cta = row["Cta"]
    valor = row["Vl_lancamento"]
    data = "31/12/2024"  # Data fixa para todos os lan√ßamentos

    print(f"üìå Lan√ßando {index + 1}/{total_lancamentos} | Conta: {cta} | Valor: {valor}")

    # 1Ô∏è‚É£ Limpar a tela
    pyautogui.press("f2")
    time.sleep(0.5)

    # 2Ô∏è‚É£ Preencher Cta
    pyautogui.click(x=138, y=158)
    pyautogui.write(cta)
    time.sleep(0.5)

    # 3Ô∏è‚É£ Preencher Data
    pyautogui.click(x=147, y=254)
    pyautogui.write(data)
    time.sleep(0.5)
    pyautogui.press("tab")

    # 4Ô∏è‚É£ Preencher Esp√©cie ("A" e tab)
    pyautogui.write("A")
    time.sleep(0.5)
    pyautogui.press("tab")

    # 5Ô∏è‚É£ Preencher Valor do Lan√ßamento
    pyautogui.write(valor)
    time.sleep(0.5)
    pyautogui.press("tab")

    # 6Ô∏è‚É£ Preencher Documento ("LUCRO" e tab)
    pyautogui.write("LUCRO")
    time.sleep(0.5)
    pyautogui.press("tab")

    # 7Ô∏è‚É£ Preencher Hist√≥rico Auxiliar ("LUCRO" e tab)
    pyautogui.write("LUCRO")
    time.sleep(0.5)
    pyautogui.press("tab")

    # 8Ô∏è‚É£ Preencher C√≥digo Hist√≥rico ("76" e tab)
    pyautogui.write("76")
    time.sleep(0.5)
    pyautogui.press("tab")

    # 9Ô∏è‚É£ Clicar em Confirmar
    pyautogui.click(x=935, y=663)
    time.sleep(0.8)  # Aguardar processamento

    # üîü Apertar Enter para fechar mensagem
    pyautogui.press("enter")
    time.sleep(0.8)

    # 1Ô∏è‚É£1Ô∏è‚É£ Repetir o ciclo limpando a tela
    pyautogui.press("f2")
    time.sleep(0.8)

# ‚è≥ Capturar o tempo final
tempo_fim = time.time()

# üïí Calcular o tempo total gasto pelo script
tempo_total_script = tempo_fim - tempo_inicio

# ‚è≥ Calcular o tempo que seria gasto manualmente
tempo_total_manual = total_lancamentos * tempo_por_lancamento_manual

# ‚è≥ Calcular o tempo economizado
tempo_economizado = tempo_total_manual - tempo_total_script

# üìå Exibir resultados formatados
minutos_script, segundos_script = divmod(tempo_total_script, 60)
minutos_economizados, segundos_economizados = divmod(tempo_economizado, 60)

print(f"\n‚úÖ Lan√ßamentos finalizados em {int(minutos_script)} min e {segundos_script:.2f} segundos!")
print(f"üïí Se fosse manualmente, levaria {int(tempo_total_manual // 60)} min e {tempo_total_manual % 60:.2f} segundos.")
print(f"üí∞ Tempo economizado: {int(minutos_economizados)} min e {segundos_economizados:.2f} segundos! üöÄ")
